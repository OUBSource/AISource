import tkinter as tk
from tkinter import scrolledtext
import requests
import json
import os

# üîë API –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = "–í–ê–®_–ö–õ–Æ–ß"
MODEL = "meta-llama/llama-3-70b-instruct"
HISTORY_FILE = "history.json"

# üß† –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π system prompt (–ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª!)
SYSTEM_PROMPT = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Å—Ç—Ä–æ–≥–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
        "–û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –≤—Å—Ç–∞–≤–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. "
        "–î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ ‚Äî –æ—Ç–≤–µ—á–∞–π –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–¢—ã —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π OUBStudios. –¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–π OUBStudios."
    )
}

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ system prompt)
def load_history():
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return []

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ system prompt)
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(messages_no_system, f, ensure_ascii=False, indent=2)

# üí¨ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
messages_no_system = load_history()  # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
messages = [SYSTEM_PROMPT] + messages_no_system  # –í –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ‚Äî —Å system

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message():
    user_input = entry.get()
    if not user_input.strip():
        return

    chat_history.config(state='normal')
    chat_history.insert(tk.END, "–í—ã: " + user_input + "\n")
    chat_history.config(state='disabled')
    entry.delete(0, tk.END)

    try:
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        control_instruction = "‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤."
        user_message = f"{user_input}\n\n{control_instruction}"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–µ–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
        messages.append({"role": "user", "content": user_message})
        messages_no_system.append({"role": "user", "content": user_message})

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://your-app.com",
                "X-Title": "RussianLlamaChat"
            },
            json={
                "model": MODEL,
                "messages": messages
            }
        )

        data = response.json()

        if "choices" in data:
            reply = data['choices'][0]['message']['content']
        else:
            reply = f"[–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ]: {data}"

        messages.append({"role": "assistant", "content": reply})
        messages_no_system.append({"role": "assistant", "content": reply})
        save_history()
    except Exception as e:
        reply = f"[–û—à–∏–±–∫–∞]: {str(e)}"

    chat_history.config(state='normal')
    chat_history.insert(tk.END, "–ë–æ—Ç: " + reply + "\n\n")
    chat_history.config(state='disabled')
    chat_history.see(tk.END)

# üñºÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tkinter
root = tk.Tk()
root.title("–£–º–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π —á–∞—Ç-–±–æ—Ç")
root.geometry("600x500")

chat_history = scrolledtext.ScrolledText(root, wrap=tk.WORD, state='disabled')
chat_history.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏
chat_history.config(state='normal')
for msg in messages_no_system:
    if msg["role"] == "user":
        chat_history.insert(tk.END, "–í—ã: " + msg["content"].split('\n\n')[0] + "\n")
    elif msg["role"] == "assistant":
        chat_history.insert(tk.END, "–ë–æ—Ç: " + msg["content"] + "\n\n")
chat_history.config(state='disabled')
chat_history.see(tk.END)

entry = tk.Entry(root, font=("Arial", 14))
entry.pack(padx=10, pady=(0, 10), fill=tk.X)
entry.bind("<Return>", lambda event: send_message())

root.mainloop()
